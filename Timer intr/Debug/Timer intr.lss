
Timer intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a3  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000324  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b1  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_11>:
#define  F_CPU 8000000UL
#include <avr/interrupt.h>
#include <avr/delay.h>

ISR(TIMER0_OVF_vect) 
{ 
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTC ^= (1<<PC0); /* Toggle PORTC PC0 */ 
  7a:	95 b3       	in	r25, 0x15	; 21
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	89 27       	eor	r24, r25
  80:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0xB2; /* At the end of each cycle: Reload start value to TCNT0 */
  82:	82 eb       	ldi	r24, 0xB2	; 178
  84:	82 bf       	out	0x32, r24	; 50
}
  86:	9f 91       	pop	r25
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <main>:

int main(void)
{
    DDRA = 0x07; // set pin A as output pins
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	8a bb       	out	0x1a, r24	; 26
	DDRC = 1<<PC0; // set pc0 as an output pin
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0; //set  port D as the output pin 
  9c:	11 ba       	out	0x11, r1	; 17
	PORTD = PORTD | 1<<PD2;   // Activate the pull-up resistor
  9e:	92 9a       	sbi	0x12, 2	; 18
	
	TIMSK = 1<<TOIE0;  // Enable the timer overflow interrupt
  a0:	89 bf       	out	0x39, r24	; 57
	
	
	TCNT0 = 0xA0;   // Loads the TCNT0, then counts for 10ms
  a2:	80 ea       	ldi	r24, 0xA0	; 160
  a4:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 1<<CS00 | 1<<CS02;  // starts timer 0 with 1024 pre-scaler
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	83 bf       	out	0x33, r24	; 51
	sei();    // enable the global interrupt
  aa:	78 94       	sei
    while (1) 
    {
		PORTA = PORTA | 1<<PA0;
  ac:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2a>
  be:	00 00       	nop
		_delay_ms(400);
		PORTA= PORTA & (~(1<<PA0));
  c0:	d8 98       	cbi	0x1b, 0	; 27
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x34>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x3e>
  d2:	00 00       	nop
		_delay_ms(400);
		PORTA  = PORTA  | 1<<PA1;
  d4:	d9 9a       	sbi	0x1b, 1	; 27
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ec       	ldi	r24, 0xC3	; 195
  da:	99 e0       	ldi	r25, 0x09	; 9
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x48>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x52>
  e6:	00 00       	nop
		_delay_ms(400);
		PORTA= PORTA & (~(1<<PA1));
  e8:	d9 98       	cbi	0x1b, 1	; 27
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x5c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x66>
  fa:	00 00       	nop
		_delay_ms(400);
		PORTA = PORTA | 1<<PA2;
  fc:	da 9a       	sbi	0x1b, 2	; 27
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ec       	ldi	r24, 0xC3	; 195
 102:	99 e0       	ldi	r25, 0x09	; 9
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x70>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7a>
 10e:	00 00       	nop
		_delay_ms(400);
		PORTA= PORTA & (~(1<<PA2));
 110:	da 98       	cbi	0x1b, 2	; 27
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ec       	ldi	r24, 0xC3	; 195
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x84>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x8e>
 122:	00 00       	nop
 124:	c3 cf       	rjmp	.-122    	; 0xac <main+0x18>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
